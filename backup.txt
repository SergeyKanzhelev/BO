01. Empty middleware

using System.Threading.Tasks;
using Microsoft.Owin;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using System;

namespace OwinSelfHostSDK
{
    public class ApplicationInsightsMiddleware : OwinMiddleware
    {
        public ApplicationInsightsMiddleware(OwinMiddleware next)
            : base(next)
        {
        }
        
        public override async Task Invoke(IOwinContext context)
        {
            await Next.Invoke(context);
        }
    }
}


02. Initialize requestTelemetry
                operation.Telemetry.HttpMethod = context.Request.Method;
                operation.Telemetry.Url = context.Request.Uri;
                operation.Telemetry.ResponseCode = context.Response.StatusCode.ToString();
                operation.Telemetry.Success = context.Response.StatusCode == 200;


03. AppExtension

using Microsoft.ApplicationInsights.Extensibility;
using Owin;

namespace OwinSelfHostSDK
{
    public static class AppExtensions
    {
        public static void EnableApplicationInsights(this IAppBuilder app, TelemetryConfiguration configuration)
        {
            app.Use<ApplicationInsightsMiddleware>(configuration);
        }
    }
}


04. Standard telemetry initializer

            configuration.TelemetryInitializers.Add(new AzureRoleEnvironmentTelemetryInitializer());
            configuration.TelemetryInitializers.Add(new DomainNameRoleInstanceTelemetryInitializer());


05. Custom telemetry initializer

	        private class ApplicationVersionTelemetryInitializer : ITelemetryInitializer
	        {
	            private readonly string appVersion;
	
	            public ApplicationVersionTelemetryInitializer(IAppBuilder app)
	            {
	                this.appVersion = app.Properties["Version"].ToString();
	            }
	
	            public void Initialize(ITelemetry telemetry)
	            {
	            }
	        }

06. Read User/Session

                operation.Telemetry.Context.User.Id = context.Request.Cookies["ai_user"]?.Split("|".ToCharArray())[0];
                operation.Telemetry.Context.Session.Id = context.Request.Cookies["ai_session"]?.Split("|".ToCharArray())[0];


07. Manual correlation

                ExceptionTelemetry excT = new ExceptionTelemetry(exc);

                if (TelemetryConfiguration.Active.TelemetryInitializers.Where(
                        (item) => { return item is OperationCorrelationTelemetryInitializer; }).Count() == 0)
                {

                    excT.Context.Operation.Id = operation.Telemetry.Context.Operation.Id;
                    excT.Context.Operation.ParentId = operation.Telemetry.Id;
                }

                client.TrackException(excT);


08. Cross layer correlation

                if (context.Request.Headers.ContainsKey("x-ms-request-root-id"))
                {
                    operation.Telemetry.Context.Operation.Id = context.Request.Headers["x-ms-request-root-id"];
                }

                if (context.Request.Headers.ContainsKey("x-ms-request-id"))
                {
                    operation.Telemetry.Context.Operation.ParentId = context.Request.Headers["x-ms-request-id"];
                }

09. Initialize modules

            var performanceCounters = new PerformanceCollectorModule();
            performanceCounters.Counters.Add(new PerformanceCounterCollectionRequest(@"\Process\ID", "ID"));
            performanceCounters.Initialize(configuration);

            var dependencies = new DependencyTrackingTelemetryModule();
            dependencies.Initialize(configuration);


10. Initialize channel

            configuration.TelemetryChannel = new ServerTelemetryChannel();

            configuration.TelemetryProcessorChainBuilder
                .UseAdaptiveSampling()
                .Build();






































































public static void ListContextProperties(ITelemetry rt)
{
    // Every telemetry item has a context associated with it
    // This context is used to describe request in a context of other telemetry items


    // Host context
    rt.Context.Cloud.RoleName = "Role Name";
    rt.Context.Cloud.RoleInstance = "Role Instance";


    // Application context
    rt.Context.Component.Version = "Application Version";


    // Custom properties - limit 200 per application
    rt.Context.Properties["DeploymentUnit"] = "SouthUS";


    // Application user context
    rt.Context.Location.Ip = "127.0.0.1";
    //rt.Context.Location.Country
    //rt.Context.Location.StateOrProvince
    //rt.Context.Location.City
    rt.Context.Operation.SyntheticSource = "Test in production";


    // Session context
    rt.Context.User.Id = "Anonymous User Id";
    rt.Context.Session.Id = "Anonymous Session Id";

    rt.Context.User.AccountId = "Account Id";
    rt.Context.User.AuthenticatedUserId = "Authenticated user id";


    // Operation context
    rt.Context.Operation.Id = "Root operatioin id";
    rt.Context.Operation.ParentId = "Parent Operation Id";
    rt.Context.Operation.Name = "Operation name";
}


